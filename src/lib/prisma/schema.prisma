// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime          @updatedAt @db.Timestamptz(3)
  archivedAt  DateTime?         @db.Timestamptz(3)
  email       String            @unique @db.VarChar(256)
  password    String?           @db.Text
  role        Role              @default(USER)
  collections CollectionSpace[]
}

enum Role {
  ADMIN
  USER
}

model CollectionSpace {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime              @updatedAt @db.Timestamptz(3)
  archivedAt           DateTime?             @db.Timestamptz(3)
  visibility           Visibility            @default(PRIVATE)
  userId               String
  user                 User                  @relation(fields: [userId], references: [id])
  realWorldLocations   RealWorldLocation[]
  customCardAttributes CustomCardAttribute[]
  cards                CollectedCard[]
  name                 String
  description          String?

  @@unique([userId, name])
}

model RealWorldLocation {
  id                String                @id @default(cuid())
  createdAt         DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime              @updatedAt @db.Timestamptz(3)
  archivedAt        DateTime?             @db.Timestamptz(3)
  name              String
  description       String?
  locationType      RealWorldLocationType @default(BINDER)
  collectionSpaceId String
  visibility        Visibility            @default(PRIVATE)
  collectionSpace   CollectionSpace       @relation(fields: [collectionSpaceId], references: [id])
  cards             CollectedCard[]
  @@unique([collectionSpaceId, name])
}

enum RealWorldLocationType {
  DECK
  CUBE
  BINDER
}

model CollectedCard {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime            @updatedAt @db.Timestamptz(3)
  archivedAt        DateTime?           @db.Timestamptz(3)
  multiverseId      String
  locationId        String?
  location          RealWorldLocation?  @relation(fields: [locationId], references: [id])
  collectionSpace   CollectionSpace?    @relation(fields: [collectionSpaceId], references: [id])
  collectionSpaceId String?
  attributes        AttributesOnCards[]
}

model CustomCardAttribute {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime            @updatedAt @db.Timestamptz(3)
  archivedAt         DateTime?           @db.Timestamptz(3)
  name               String
  description        String?
  collectionSpaceId  String
  collectionSpace    CollectionSpace     @relation(fields: [collectionSpaceId], references: [id])
  cardsWithAttribute AttributesOnCards[]
  @@unique([collectionSpaceId, name])
}

model AttributesOnCards {
  createdAt   DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime            @updatedAt @db.Timestamptz(3)
  archivedAt  DateTime?           @db.Timestamptz(3)
  attributeId String
  attribute   CustomCardAttribute @relation(fields: [attributeId], references: [id])
  cardId      String
  card        CollectedCard       @relation(fields: [cardId], references: [id])

  @@id([cardId, attributeId])
  @@unique([cardId, attributeId])
}

enum Visibility {
  PRIVATE
  UNLISTED
  PUBLIC
}
